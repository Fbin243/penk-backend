// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: timetracking/timetracking_service.proto

package timetracking

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	common "tenkhours/proto/pb/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TimeTrackingService_GetCurrentTimeTracking_FullMethodName      = "/timetracking.TimeTrackingService/GetCurrentTimeTracking"
	TimeTrackingService_GetTotalCurrentTimeTracking_FullMethodName = "/timetracking.TimeTrackingService/GetTotalCurrentTimeTracking"
	TimeTrackingService_CreateTimeTracking_FullMethodName          = "/timetracking.TimeTrackingService/CreateTimeTracking"
	TimeTrackingService_UpdateTimeTracking_FullMethodName          = "/timetracking.TimeTrackingService/UpdateTimeTracking"
)

// TimeTrackingServiceClient is the client API for TimeTrackingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimeTrackingServiceClient interface {
	GetCurrentTimeTracking(ctx context.Context, in *common.EmptyReq, opts ...grpc.CallOption) (*TimeTracking, error)
	GetTotalCurrentTimeTracking(ctx context.Context, in *TotalTimeTrackingReq, opts ...grpc.CallOption) (*TotalTimeTrackingResp, error)
	CreateTimeTracking(ctx context.Context, in *CreateTimeTrackingReq, opts ...grpc.CallOption) (*TimeTracking, error)
	UpdateTimeTracking(ctx context.Context, in *common.EmptyReq, opts ...grpc.CallOption) (*TimeTrackingWithFish, error)
}

type timeTrackingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTimeTrackingServiceClient(cc grpc.ClientConnInterface) TimeTrackingServiceClient {
	return &timeTrackingServiceClient{cc}
}

func (c *timeTrackingServiceClient) GetCurrentTimeTracking(ctx context.Context, in *common.EmptyReq, opts ...grpc.CallOption) (*TimeTracking, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TimeTracking)
	err := c.cc.Invoke(ctx, TimeTrackingService_GetCurrentTimeTracking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeTrackingServiceClient) GetTotalCurrentTimeTracking(ctx context.Context, in *TotalTimeTrackingReq, opts ...grpc.CallOption) (*TotalTimeTrackingResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TotalTimeTrackingResp)
	err := c.cc.Invoke(ctx, TimeTrackingService_GetTotalCurrentTimeTracking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeTrackingServiceClient) CreateTimeTracking(ctx context.Context, in *CreateTimeTrackingReq, opts ...grpc.CallOption) (*TimeTracking, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TimeTracking)
	err := c.cc.Invoke(ctx, TimeTrackingService_CreateTimeTracking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeTrackingServiceClient) UpdateTimeTracking(ctx context.Context, in *common.EmptyReq, opts ...grpc.CallOption) (*TimeTrackingWithFish, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TimeTrackingWithFish)
	err := c.cc.Invoke(ctx, TimeTrackingService_UpdateTimeTracking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimeTrackingServiceServer is the server API for TimeTrackingService service.
// All implementations must embed UnimplementedTimeTrackingServiceServer
// for forward compatibility.
type TimeTrackingServiceServer interface {
	GetCurrentTimeTracking(context.Context, *common.EmptyReq) (*TimeTracking, error)
	GetTotalCurrentTimeTracking(context.Context, *TotalTimeTrackingReq) (*TotalTimeTrackingResp, error)
	CreateTimeTracking(context.Context, *CreateTimeTrackingReq) (*TimeTracking, error)
	UpdateTimeTracking(context.Context, *common.EmptyReq) (*TimeTrackingWithFish, error)
	mustEmbedUnimplementedTimeTrackingServiceServer()
}

// UnimplementedTimeTrackingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTimeTrackingServiceServer struct{}

func (UnimplementedTimeTrackingServiceServer) GetCurrentTimeTracking(context.Context, *common.EmptyReq) (*TimeTracking, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentTimeTracking not implemented")
}
func (UnimplementedTimeTrackingServiceServer) GetTotalCurrentTimeTracking(context.Context, *TotalTimeTrackingReq) (*TotalTimeTrackingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalCurrentTimeTracking not implemented")
}
func (UnimplementedTimeTrackingServiceServer) CreateTimeTracking(context.Context, *CreateTimeTrackingReq) (*TimeTracking, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTimeTracking not implemented")
}
func (UnimplementedTimeTrackingServiceServer) UpdateTimeTracking(context.Context, *common.EmptyReq) (*TimeTrackingWithFish, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTimeTracking not implemented")
}
func (UnimplementedTimeTrackingServiceServer) mustEmbedUnimplementedTimeTrackingServiceServer() {}
func (UnimplementedTimeTrackingServiceServer) testEmbeddedByValue()                             {}

// UnsafeTimeTrackingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimeTrackingServiceServer will
// result in compilation errors.
type UnsafeTimeTrackingServiceServer interface {
	mustEmbedUnimplementedTimeTrackingServiceServer()
}

func RegisterTimeTrackingServiceServer(s grpc.ServiceRegistrar, srv TimeTrackingServiceServer) {
	// If the following call pancis, it indicates UnimplementedTimeTrackingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TimeTrackingService_ServiceDesc, srv)
}

func _TimeTrackingService_GetCurrentTimeTracking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeTrackingServiceServer).GetCurrentTimeTracking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimeTrackingService_GetCurrentTimeTracking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeTrackingServiceServer).GetCurrentTimeTracking(ctx, req.(*common.EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeTrackingService_GetTotalCurrentTimeTracking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalTimeTrackingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeTrackingServiceServer).GetTotalCurrentTimeTracking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimeTrackingService_GetTotalCurrentTimeTracking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeTrackingServiceServer).GetTotalCurrentTimeTracking(ctx, req.(*TotalTimeTrackingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeTrackingService_CreateTimeTracking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTimeTrackingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeTrackingServiceServer).CreateTimeTracking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimeTrackingService_CreateTimeTracking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeTrackingServiceServer).CreateTimeTracking(ctx, req.(*CreateTimeTrackingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeTrackingService_UpdateTimeTracking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeTrackingServiceServer).UpdateTimeTracking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimeTrackingService_UpdateTimeTracking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeTrackingServiceServer).UpdateTimeTracking(ctx, req.(*common.EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TimeTrackingService_ServiceDesc is the grpc.ServiceDesc for TimeTrackingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimeTrackingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "timetracking.TimeTrackingService",
	HandlerType: (*TimeTrackingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentTimeTracking",
			Handler:    _TimeTrackingService_GetCurrentTimeTracking_Handler,
		},
		{
			MethodName: "GetTotalCurrentTimeTracking",
			Handler:    _TimeTrackingService_GetTotalCurrentTimeTracking_Handler,
		},
		{
			MethodName: "CreateTimeTracking",
			Handler:    _TimeTrackingService_CreateTimeTracking_Handler,
		},
		{
			MethodName: "UpdateTimeTracking",
			Handler:    _TimeTrackingService_UpdateTimeTracking_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "timetracking/timetracking_service.proto",
}
