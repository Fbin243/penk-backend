// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: core/core_service.proto

package core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	common "tenkhours/proto/pb/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Core_IntrospectUser_FullMethodName     = "/core.Core/IntrospectUser"
	Core_UpsertCharacter_FullMethodName    = "/core.Core/UpsertCharacter"
	Core_UpsertGoal_FullMethodName         = "/core.Core/UpsertGoal"
	Core_DeleteGoal_FullMethodName         = "/core.Core/DeleteGoal"
	Core_UpsertTimeTracking_FullMethodName = "/core.Core/UpsertTimeTracking"
	Core_UpsertTask_FullMethodName         = "/core.Core/UpsertTask"
	Core_UpsertTasks_FullMethodName        = "/core.Core/UpsertTasks"
	Core_DeleteTask_FullMethodName         = "/core.Core/DeleteTask"
	Core_UpsertTaskSession_FullMethodName  = "/core.Core/UpsertTaskSession"
	Core_UpsertTaskSessions_FullMethodName = "/core.Core/UpsertTaskSessions"
	Core_DeleteTaskSession_FullMethodName  = "/core.Core/DeleteTaskSession"
	Core_UpsertHabit_FullMethodName        = "/core.Core/UpsertHabit"
	Core_DeleteHabit_FullMethodName        = "/core.Core/DeleteHabit"
	Core_UpsertHabitLog_FullMethodName     = "/core.Core/UpsertHabitLog"
	Core_UpsertCategory_FullMethodName     = "/core.Core/UpsertCategory"
	Core_DeleteCategory_FullMethodName     = "/core.Core/DeleteCategory"
	Core_UpsertMetric_FullMethodName       = "/core.Core/UpsertMetric"
	Core_DeleteMetric_FullMethodName       = "/core.Core/DeleteMetric"
)

// CoreClient is the client API for Core service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreClient interface {
	IntrospectUser(ctx context.Context, in *IntrospectReq, opts ...grpc.CallOption) (*IntrospectResp, error)
	UpsertCharacter(ctx context.Context, in *CharacterInput, opts ...grpc.CallOption) (*Character, error)
	UpsertGoal(ctx context.Context, in *GoalInput, opts ...grpc.CallOption) (*Goal, error)
	DeleteGoal(ctx context.Context, in *common.IdReq, opts ...grpc.CallOption) (*common.IdResp, error)
	UpsertTimeTracking(ctx context.Context, in *TimeTrackingInput, opts ...grpc.CallOption) (*TimeTracking, error)
	UpsertTask(ctx context.Context, in *TaskInput, opts ...grpc.CallOption) (*TaskMsg, error)
	UpsertTasks(ctx context.Context, in *TaskInputs, opts ...grpc.CallOption) (*TaskMsgs, error)
	DeleteTask(ctx context.Context, in *common.IdReq, opts ...grpc.CallOption) (*common.IdResp, error)
	UpsertTaskSession(ctx context.Context, in *TaskSessionInput, opts ...grpc.CallOption) (*TaskSession, error)
	UpsertTaskSessions(ctx context.Context, in *TaskSessionInputs, opts ...grpc.CallOption) (*TaskSessions, error)
	DeleteTaskSession(ctx context.Context, in *common.IdReq, opts ...grpc.CallOption) (*common.IdResp, error)
	UpsertHabit(ctx context.Context, in *HabitInput, opts ...grpc.CallOption) (*Habit, error)
	DeleteHabit(ctx context.Context, in *common.IdReq, opts ...grpc.CallOption) (*common.IdResp, error)
	UpsertHabitLog(ctx context.Context, in *HabitLogInput, opts ...grpc.CallOption) (*HabitLog, error)
	UpsertCategory(ctx context.Context, in *CategoryInput, opts ...grpc.CallOption) (*Category, error)
	DeleteCategory(ctx context.Context, in *common.IdReq, opts ...grpc.CallOption) (*common.IdResp, error)
	UpsertMetric(ctx context.Context, in *MetricInput, opts ...grpc.CallOption) (*Metric, error)
	DeleteMetric(ctx context.Context, in *common.IdReq, opts ...grpc.CallOption) (*common.IdResp, error)
}

type coreClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreClient(cc grpc.ClientConnInterface) CoreClient {
	return &coreClient{cc}
}

func (c *coreClient) IntrospectUser(ctx context.Context, in *IntrospectReq, opts ...grpc.CallOption) (*IntrospectResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntrospectResp)
	err := c.cc.Invoke(ctx, Core_IntrospectUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpsertCharacter(ctx context.Context, in *CharacterInput, opts ...grpc.CallOption) (*Character, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Character)
	err := c.cc.Invoke(ctx, Core_UpsertCharacter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpsertGoal(ctx context.Context, in *GoalInput, opts ...grpc.CallOption) (*Goal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Goal)
	err := c.cc.Invoke(ctx, Core_UpsertGoal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteGoal(ctx context.Context, in *common.IdReq, opts ...grpc.CallOption) (*common.IdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.IdResp)
	err := c.cc.Invoke(ctx, Core_DeleteGoal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpsertTimeTracking(ctx context.Context, in *TimeTrackingInput, opts ...grpc.CallOption) (*TimeTracking, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TimeTracking)
	err := c.cc.Invoke(ctx, Core_UpsertTimeTracking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpsertTask(ctx context.Context, in *TaskInput, opts ...grpc.CallOption) (*TaskMsg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskMsg)
	err := c.cc.Invoke(ctx, Core_UpsertTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpsertTasks(ctx context.Context, in *TaskInputs, opts ...grpc.CallOption) (*TaskMsgs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskMsgs)
	err := c.cc.Invoke(ctx, Core_UpsertTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteTask(ctx context.Context, in *common.IdReq, opts ...grpc.CallOption) (*common.IdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.IdResp)
	err := c.cc.Invoke(ctx, Core_DeleteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpsertTaskSession(ctx context.Context, in *TaskSessionInput, opts ...grpc.CallOption) (*TaskSession, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskSession)
	err := c.cc.Invoke(ctx, Core_UpsertTaskSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpsertTaskSessions(ctx context.Context, in *TaskSessionInputs, opts ...grpc.CallOption) (*TaskSessions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskSessions)
	err := c.cc.Invoke(ctx, Core_UpsertTaskSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteTaskSession(ctx context.Context, in *common.IdReq, opts ...grpc.CallOption) (*common.IdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.IdResp)
	err := c.cc.Invoke(ctx, Core_DeleteTaskSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpsertHabit(ctx context.Context, in *HabitInput, opts ...grpc.CallOption) (*Habit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Habit)
	err := c.cc.Invoke(ctx, Core_UpsertHabit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteHabit(ctx context.Context, in *common.IdReq, opts ...grpc.CallOption) (*common.IdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.IdResp)
	err := c.cc.Invoke(ctx, Core_DeleteHabit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpsertHabitLog(ctx context.Context, in *HabitLogInput, opts ...grpc.CallOption) (*HabitLog, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HabitLog)
	err := c.cc.Invoke(ctx, Core_UpsertHabitLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpsertCategory(ctx context.Context, in *CategoryInput, opts ...grpc.CallOption) (*Category, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Category)
	err := c.cc.Invoke(ctx, Core_UpsertCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteCategory(ctx context.Context, in *common.IdReq, opts ...grpc.CallOption) (*common.IdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.IdResp)
	err := c.cc.Invoke(ctx, Core_DeleteCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) UpsertMetric(ctx context.Context, in *MetricInput, opts ...grpc.CallOption) (*Metric, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Metric)
	err := c.cc.Invoke(ctx, Core_UpsertMetric_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeleteMetric(ctx context.Context, in *common.IdReq, opts ...grpc.CallOption) (*common.IdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.IdResp)
	err := c.cc.Invoke(ctx, Core_DeleteMetric_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreServer is the server API for Core service.
// All implementations must embed UnimplementedCoreServer
// for forward compatibility.
type CoreServer interface {
	IntrospectUser(context.Context, *IntrospectReq) (*IntrospectResp, error)
	UpsertCharacter(context.Context, *CharacterInput) (*Character, error)
	UpsertGoal(context.Context, *GoalInput) (*Goal, error)
	DeleteGoal(context.Context, *common.IdReq) (*common.IdResp, error)
	UpsertTimeTracking(context.Context, *TimeTrackingInput) (*TimeTracking, error)
	UpsertTask(context.Context, *TaskInput) (*TaskMsg, error)
	UpsertTasks(context.Context, *TaskInputs) (*TaskMsgs, error)
	DeleteTask(context.Context, *common.IdReq) (*common.IdResp, error)
	UpsertTaskSession(context.Context, *TaskSessionInput) (*TaskSession, error)
	UpsertTaskSessions(context.Context, *TaskSessionInputs) (*TaskSessions, error)
	DeleteTaskSession(context.Context, *common.IdReq) (*common.IdResp, error)
	UpsertHabit(context.Context, *HabitInput) (*Habit, error)
	DeleteHabit(context.Context, *common.IdReq) (*common.IdResp, error)
	UpsertHabitLog(context.Context, *HabitLogInput) (*HabitLog, error)
	UpsertCategory(context.Context, *CategoryInput) (*Category, error)
	DeleteCategory(context.Context, *common.IdReq) (*common.IdResp, error)
	UpsertMetric(context.Context, *MetricInput) (*Metric, error)
	DeleteMetric(context.Context, *common.IdReq) (*common.IdResp, error)
	mustEmbedUnimplementedCoreServer()
}

// UnimplementedCoreServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCoreServer struct{}

func (UnimplementedCoreServer) IntrospectUser(context.Context, *IntrospectReq) (*IntrospectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntrospectUser not implemented")
}
func (UnimplementedCoreServer) UpsertCharacter(context.Context, *CharacterInput) (*Character, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertCharacter not implemented")
}
func (UnimplementedCoreServer) UpsertGoal(context.Context, *GoalInput) (*Goal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertGoal not implemented")
}
func (UnimplementedCoreServer) DeleteGoal(context.Context, *common.IdReq) (*common.IdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGoal not implemented")
}
func (UnimplementedCoreServer) UpsertTimeTracking(context.Context, *TimeTrackingInput) (*TimeTracking, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertTimeTracking not implemented")
}
func (UnimplementedCoreServer) UpsertTask(context.Context, *TaskInput) (*TaskMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertTask not implemented")
}
func (UnimplementedCoreServer) UpsertTasks(context.Context, *TaskInputs) (*TaskMsgs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertTasks not implemented")
}
func (UnimplementedCoreServer) DeleteTask(context.Context, *common.IdReq) (*common.IdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedCoreServer) UpsertTaskSession(context.Context, *TaskSessionInput) (*TaskSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertTaskSession not implemented")
}
func (UnimplementedCoreServer) UpsertTaskSessions(context.Context, *TaskSessionInputs) (*TaskSessions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertTaskSessions not implemented")
}
func (UnimplementedCoreServer) DeleteTaskSession(context.Context, *common.IdReq) (*common.IdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTaskSession not implemented")
}
func (UnimplementedCoreServer) UpsertHabit(context.Context, *HabitInput) (*Habit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertHabit not implemented")
}
func (UnimplementedCoreServer) DeleteHabit(context.Context, *common.IdReq) (*common.IdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHabit not implemented")
}
func (UnimplementedCoreServer) UpsertHabitLog(context.Context, *HabitLogInput) (*HabitLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertHabitLog not implemented")
}
func (UnimplementedCoreServer) UpsertCategory(context.Context, *CategoryInput) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertCategory not implemented")
}
func (UnimplementedCoreServer) DeleteCategory(context.Context, *common.IdReq) (*common.IdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedCoreServer) UpsertMetric(context.Context, *MetricInput) (*Metric, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertMetric not implemented")
}
func (UnimplementedCoreServer) DeleteMetric(context.Context, *common.IdReq) (*common.IdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMetric not implemented")
}
func (UnimplementedCoreServer) mustEmbedUnimplementedCoreServer() {}
func (UnimplementedCoreServer) testEmbeddedByValue()              {}

// UnsafeCoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreServer will
// result in compilation errors.
type UnsafeCoreServer interface {
	mustEmbedUnimplementedCoreServer()
}

func RegisterCoreServer(s grpc.ServiceRegistrar, srv CoreServer) {
	// If the following call pancis, it indicates UnimplementedCoreServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Core_ServiceDesc, srv)
}

func _Core_IntrospectUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntrospectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).IntrospectUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_IntrospectUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).IntrospectUser(ctx, req.(*IntrospectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpsertCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpsertCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpsertCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpsertCharacter(ctx, req.(*CharacterInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpsertGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoalInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpsertGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpsertGoal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpsertGoal(ctx, req.(*GoalInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteGoal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteGoal(ctx, req.(*common.IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpsertTimeTracking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeTrackingInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpsertTimeTracking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpsertTimeTracking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpsertTimeTracking(ctx, req.(*TimeTrackingInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpsertTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpsertTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpsertTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpsertTask(ctx, req.(*TaskInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpsertTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskInputs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpsertTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpsertTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpsertTasks(ctx, req.(*TaskInputs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteTask(ctx, req.(*common.IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpsertTaskSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSessionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpsertTaskSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpsertTaskSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpsertTaskSession(ctx, req.(*TaskSessionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpsertTaskSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSessionInputs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpsertTaskSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpsertTaskSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpsertTaskSessions(ctx, req.(*TaskSessionInputs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteTaskSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteTaskSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteTaskSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteTaskSession(ctx, req.(*common.IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpsertHabit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HabitInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpsertHabit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpsertHabit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpsertHabit(ctx, req.(*HabitInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteHabit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteHabit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteHabit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteHabit(ctx, req.(*common.IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpsertHabitLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HabitLogInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpsertHabitLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpsertHabitLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpsertHabitLog(ctx, req.(*HabitLogInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpsertCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpsertCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpsertCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpsertCategory(ctx, req.(*CategoryInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteCategory(ctx, req.(*common.IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_UpsertMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).UpsertMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_UpsertMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).UpsertMetric(ctx, req.(*MetricInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeleteMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Core_DeleteMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteMetric(ctx, req.(*common.IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Core_ServiceDesc is the grpc.ServiceDesc for Core service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Core_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.Core",
	HandlerType: (*CoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IntrospectUser",
			Handler:    _Core_IntrospectUser_Handler,
		},
		{
			MethodName: "UpsertCharacter",
			Handler:    _Core_UpsertCharacter_Handler,
		},
		{
			MethodName: "UpsertGoal",
			Handler:    _Core_UpsertGoal_Handler,
		},
		{
			MethodName: "DeleteGoal",
			Handler:    _Core_DeleteGoal_Handler,
		},
		{
			MethodName: "UpsertTimeTracking",
			Handler:    _Core_UpsertTimeTracking_Handler,
		},
		{
			MethodName: "UpsertTask",
			Handler:    _Core_UpsertTask_Handler,
		},
		{
			MethodName: "UpsertTasks",
			Handler:    _Core_UpsertTasks_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _Core_DeleteTask_Handler,
		},
		{
			MethodName: "UpsertTaskSession",
			Handler:    _Core_UpsertTaskSession_Handler,
		},
		{
			MethodName: "UpsertTaskSessions",
			Handler:    _Core_UpsertTaskSessions_Handler,
		},
		{
			MethodName: "DeleteTaskSession",
			Handler:    _Core_DeleteTaskSession_Handler,
		},
		{
			MethodName: "UpsertHabit",
			Handler:    _Core_UpsertHabit_Handler,
		},
		{
			MethodName: "DeleteHabit",
			Handler:    _Core_DeleteHabit_Handler,
		},
		{
			MethodName: "UpsertHabitLog",
			Handler:    _Core_UpsertHabitLog_Handler,
		},
		{
			MethodName: "UpsertCategory",
			Handler:    _Core_UpsertCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _Core_DeleteCategory_Handler,
		},
		{
			MethodName: "UpsertMetric",
			Handler:    _Core_UpsertMetric_Handler,
		},
		{
			MethodName: "DeleteMetric",
			Handler:    _Core_DeleteMetric_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core/core_service.proto",
}
