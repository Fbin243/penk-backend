package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	gql "tenkhours/pkg/graphql"
	"tenkhours/services/core/entity"

	"github.com/samber/lo"
)

// CategoryID is the resolver for the categoryID field.
func (r *metricResolver) CategoryID(ctx context.Context, obj *entity.Metric) (*string, error) {
	if obj.CategoryID == nil {
		obj.CategoryID = lo.ToPtr(gql.UnassignedID)
	}
	return obj.CategoryID, nil
}

// Category is the resolver for the category field.
func (r *metricResolver) Category(ctx context.Context, obj *entity.Metric) (*entity.Category, error) {
	if obj.CategoryID == nil || *obj.CategoryID == gql.UnassignedID {
		return nil, nil
	}
	return r.CategoryRepo.FindByID(ctx, *obj.CategoryID)
}

// Keep is the resolver for the _keep field.
func (r *metricFilterResolver) Keep(ctx context.Context, obj *entity.MetricFilter, data *bool) error {
	panic(fmt.Errorf("not implemented: Keep - _keep"))
}

// Keep is the resolver for the _keep field.
func (r *metricOrderByResolver) Keep(ctx context.Context, obj *entity.MetricOrderBy, data *bool) error {
	panic(fmt.Errorf("not implemented: Keep - _keep"))
}

// Metric returns MetricResolver implementation.
func (r *Resolver) Metric() MetricResolver { return &metricResolver{r} }

// MetricFilter returns MetricFilterResolver implementation.
func (r *Resolver) MetricFilter() MetricFilterResolver { return &metricFilterResolver{r} }

// MetricOrderBy returns MetricOrderByResolver implementation.
func (r *Resolver) MetricOrderBy() MetricOrderByResolver { return &metricOrderByResolver{r} }

type metricResolver struct{ *Resolver }
type metricFilterResolver struct{ *Resolver }
type metricOrderByResolver struct{ *Resolver }
