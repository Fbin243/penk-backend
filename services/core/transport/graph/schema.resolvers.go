package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	errs "tenkhours/pkg/errors"
	"tenkhours/pkg/utils"
	"tenkhours/services/core/entity"
	"tenkhours/services/core/transport/graph/model"
	"tenkhours/services/core/transport/graph/validations"

	rrule "github.com/teambition/rrule-go"
)

// UpdateProfile is the resolver for the updateProfile field.
func (r *mutationResolver) UpdateProfile(ctx context.Context, input entity.ProfileInput) (*entity.Profile, error) {
	// Validate the input
	if err := validations.ValidateProfileInput(input); err != nil {
		return nil, err
	}

	return r.ProfileBusiness.UpdateProfile(ctx, input)
}

// DeleteProfile is the resolver for the deleteProfile field.
func (r *mutationResolver) DeleteProfile(ctx context.Context) (*entity.Profile, error) {
	return r.ProfileBusiness.DeleteProfile(ctx)
}

// UpsertCharacter is the resolver for the upsertCharacter field.
func (r *mutationResolver) UpsertCharacter(ctx context.Context, input entity.CharacterInput) (*entity.Character, error) {
	// Validate the input
	if err := validations.ValidateCharacterInput(input); err != nil {
		return nil, err
	}

	return r.CharacterBusiness.UpsertCharacter(ctx, input)
}

// DeleteCharacter is the resolver for the deleteCharacter field.
func (r *mutationResolver) DeleteCharacter(ctx context.Context, id string) (*entity.Character, error) {
	return r.CharacterBusiness.DeleteCharacter(ctx, id)
}

// UpsertGoal is the resolver for the upsertGoal field.
func (r *mutationResolver) UpsertGoal(ctx context.Context, input entity.GoalInput) (*entity.Goal, error) {
	// Validate the input
	if err := validations.ValidateGoalInput(input); err != nil {
		return nil, err
	}

	return r.GoalBusiness.Upsert(ctx, &input)
}

// DeleteGoal is the resolver for the deleteGoal field.
func (r *mutationResolver) DeleteGoal(ctx context.Context, id string) (*entity.Goal, error) {
	return r.GoalBusiness.Delete(ctx, id)
}

// UpsertMetric is the resolver for the upsertMetric field.
func (r *mutationResolver) UpsertMetric(ctx context.Context, input entity.MetricInput) (*entity.Metric, error) {
	if err := validations.ValidateMetricInput(input); err != nil {
		return nil, err
	}

	return r.MetricBusiness.Upsert(ctx, &input)
}

// DeleteMetric is the resolver for the deleteMetric field.
func (r *mutationResolver) DeleteMetric(ctx context.Context, id string) (*entity.Metric, error) {
	return r.MetricBusiness.Delete(ctx, id)
}

// UpsertCategory is the resolver for the upsertCategory field.
func (r *mutationResolver) UpsertCategory(ctx context.Context, input entity.CategoryInput) (*entity.Category, error) {
	if err := validations.ValidateCategoryInput(input); err != nil {
		return nil, err
	}

	return r.CategoryBusiness.Upsert(ctx, &input)
}

// DeleteCategory is the resolver for the deleteCategory field.
func (r *mutationResolver) DeleteCategory(ctx context.Context, id string) (*entity.Category, error) {
	return r.CategoryBusiness.Delete(ctx, id)
}

// UpsertHabit is the resolver for the upsertHabit field.
func (r *mutationResolver) UpsertHabit(ctx context.Context, input entity.HabitInput) (*entity.Habit, error) {
	// Validate RRULE string of frequency
	rule, err := rrule.StrToRRule(input.RRule)
	if err != nil {
		return nil, errs.NewGQLError(errs.ErrCodeBadRequest,
			fmt.Sprintf("Invalid frequency: %s", err.Error()))
	}

	// RRule must have DTSTART
	if rule.Options.Dtstart.IsZero() {
		return nil, errs.NewGQLError(errs.ErrCodeBadRequest,
			"DTSTART is required in frequency")
	}

	return r.HabitBusiness.Upsert(ctx, &input)
}

// DeleteHabit is the resolver for the deleteHabit field.
func (r *mutationResolver) DeleteHabit(ctx context.Context, id string) (*entity.Habit, error) {
	return r.HabitBusiness.Delete(ctx, id)
}

// UpsertHabitLog is the resolver for the upsertHabitLog field.
func (r *mutationResolver) UpsertHabitLog(ctx context.Context, input entity.HabitLogInput) (*entity.HabitLog, error) {
	return r.HabitBusiness.UpsertHabitLog(ctx, &input)
}

// UpsertTask is the resolver for the upsertTask field.
func (r *mutationResolver) UpsertTask(ctx context.Context, input entity.TaskInput) (*entity.Task, error) {
	return r.TaskBusiness.Upsert(ctx, &input)
}

// DeleteTask is the resolver for the deleteTask field.
func (r *mutationResolver) DeleteTask(ctx context.Context, id string) (*entity.Task, error) {
	return r.TaskBusiness.Delete(ctx, id)
}

// UpsertTaskSession is the resolver for the upsertTaskSession field.
func (r *mutationResolver) UpsertTaskSession(ctx context.Context, input entity.TaskSessionInput) (*entity.TaskSession, error) {
	return r.TaskBusiness.UpsertTaskSession(ctx, &input)
}

// DeleteTaskSession is the resolver for the deleteTaskSession field.
func (r *mutationResolver) DeleteTaskSession(ctx context.Context, id string) (*entity.TaskSession, error) {
	return r.TaskBusiness.DeleteTaskSession(ctx, id)
}

// UpsertTimeTracking is the resolver for the upsertTimeTracking field.
func (r *mutationResolver) UpsertTimeTracking(ctx context.Context, input entity.TimeTrackingInput) (*entity.TimeTracking, error) {
	return r.TimeTrackingBusiness.UpsertTimeTracking(ctx, &input)
}

// Characters is the resolver for the characters field.
func (r *queryResolver) Characters(ctx context.Context) ([]entity.Character, error) {
	return r.CharacterBusiness.GetCharactersByProfileID(ctx)
}

// Profile is the resolver for the profile field.
func (r *queryResolver) Profile(ctx context.Context) (*entity.Profile, error) {
	return r.ProfileBusiness.GetProfile(ctx)
}

// AppSettings is the resolver for the appSettings field.
func (r *queryResolver) AppSettings(ctx context.Context) (*model.AppSettings, error) {
	return &model.AppSettings{
		MinDurationTime:        utils.MinDurationTime,
		MaxDurationTime:        utils.MaxDurationTime,
		LimitedCharacterNumber: utils.LimitedCharacterNumber,
		LimitedCategoryNumber:  utils.LimitedCategoryNumber,
		LimitedMetricNumber:    utils.LimitedMetricNumber,
	}, nil
}

// Goals is the resolver for the goals field.
func (r *queryResolver) Goals(ctx context.Context, filter *entity.GoalFilter, orderBy *entity.GoalOrderBy, limit *int, offset *int) (*model.GoalConnection, error) {
	totalCount, goals, err := paginate(ctx,
		func() (int, error) {
			return r.GoalBusiness.Count(ctx, filter)
		},
		func() ([]entity.Goal, error) {
			return r.GoalBusiness.Get(ctx, filter, orderBy, limit, offset)
		},
	)

	return &model.GoalConnection{
		TotalCount: totalCount,
		Edges:      goals,
	}, err
}

// Metrics is the resolver for the metrics field.
func (r *queryResolver) Metrics(ctx context.Context, filter *entity.MetricFilter, orderBy *entity.MetricOrderBy, limit *int, offset *int) (*model.MetricConnection, error) {
	totalCount, metrics, err := paginate(ctx,
		func() (int, error) {
			return r.MetricBusiness.Count(ctx, filter)
		},
		func() ([]entity.Metric, error) {
			return r.MetricBusiness.Get(ctx, filter, orderBy, limit, offset)
		},
	)
	return &model.MetricConnection{
		TotalCount: totalCount,
		Edges:      metrics,
	}, err
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context, filter *entity.CategoryFilter, orderBy *entity.CategoryOrderBy, limit *int, offset *int) (*model.CategoryConnection, error) {
	totalCount, categories, err := paginate(ctx,
		func() (int, error) {
			return r.CategoryBusiness.Count(ctx, filter)
		},
		func() ([]entity.Category, error) {
			return r.CategoryBusiness.Get(ctx, filter, orderBy, limit, offset)
		},
	)

	return &model.CategoryConnection{
		TotalCount: totalCount,
		Edges:      categories,
	}, err
}

// Habits is the resolver for the habits field.
func (r *queryResolver) Habits(ctx context.Context, filter *entity.HabitFilter, orderBy *entity.HabitOrderBy, limit *int, offset *int) (*model.HabitConnection, error) {
	totalCount, habits, err := paginate(ctx,
		func() (int, error) {
			return r.HabitBusiness.Count(ctx, filter)
		},
		func() ([]entity.Habit, error) {
			return r.HabitBusiness.Get(ctx, filter, orderBy, limit, offset)
		},
	)

	return &model.HabitConnection{
		TotalCount: totalCount,
		Edges:      habits,
	}, err
}

// HabitLogs is the resolver for the habitLogs field.
func (r *queryResolver) HabitLogs(ctx context.Context, filter *entity.HabitLogFilter, orderBy *entity.HabitLogOrderBy, limit *int, offset *int) (*model.HabitLogConnection, error) {
	totalCount, habitLogs, err := paginate(ctx,
		func() (int, error) {
			return r.HabitBusiness.CountHabitLog(ctx, filter)
		},
		func() ([]entity.HabitLog, error) {
			return r.HabitBusiness.GetHabitLogs(ctx, filter, orderBy, limit, offset)
		},
	)

	return &model.HabitLogConnection{
		TotalCount: totalCount,
		Edges:      habitLogs,
	}, err
}

// Tasks is the resolver for the tasks field.
func (r *queryResolver) Tasks(ctx context.Context, filter *entity.TaskFilter, orderBy *entity.TaskOrderBy, limit *int, offset *int) (*model.TaskConnection, error) {
	totalCount, tasks, err := paginate(ctx,
		func() (int, error) {
			return r.TaskBusiness.Count(ctx, filter)
		},
		func() ([]entity.Task, error) {
			return r.TaskBusiness.Get(ctx, filter, orderBy, limit, offset)
		},
	)

	return &model.TaskConnection{
		TotalCount: totalCount,
		Edges:      tasks,
	}, err
}

// TaskSessions is the resolver for the taskSessions field.
func (r *queryResolver) TaskSessions(ctx context.Context, filter *entity.TaskSessionFilter, orderBy *entity.TaskSessionOrderBy, limit *int, offset *int) (*model.TaskSessionConnection, error) {
	totalCount, taskSessions, err := paginate(ctx,
		func() (int, error) {
			return r.TaskBusiness.CountTaskSession(ctx, filter)
		},
		func() ([]entity.TaskSession, error) {
			return r.TaskBusiness.GetTaskSessions(ctx, filter, orderBy, limit, offset)
		},
	)

	return &model.TaskSessionConnection{
		TotalCount: totalCount,
		Edges:      taskSessions,
	}, err
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
