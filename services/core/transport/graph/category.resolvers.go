package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	gql "tenkhours/pkg/graphql"
	"tenkhours/services/core/entity"
)

// Time is the resolver for the time field.
func (r *categoryResolver) Time(ctx context.Context, obj *entity.Category) (int, error) {
	if obj.ID == gql.UnassignedID {
		return r.TimeTrackingRepo.GetTotalTimeOfUnassigned(ctx, obj.CharacterID)
	}

	return r.TimeTrackingRepo.GetTotalTimeByCategoryID(ctx, obj.ID)
}

// MetricCount is the resolver for the metricCount field.
func (r *categoryResolver) MetricCount(ctx context.Context, obj *entity.Category) (int, error) {
	if obj.ID == gql.UnassignedID {
		return r.MetricRepo.CountUnassigned(ctx, obj.CharacterID)
	}

	return r.MetricRepo.CountByCategoryID(ctx, obj.ID)
}

// HabitCount is the resolver for the habitCount field.
func (r *categoryResolver) HabitCount(ctx context.Context, obj *entity.Category) (int, error) {
	if obj.ID == gql.UnassignedID {
		return r.HabitRepo.CountUnassigned(ctx, obj.CharacterID)
	}

	return r.HabitRepo.CountByCategoryID(ctx, obj.ID)
}

// TaskCount is the resolver for the taskCount field.
func (r *categoryResolver) TaskCount(ctx context.Context, obj *entity.Category) (int, error) {
	if obj.ID == gql.UnassignedID {
		return r.TaskRepo.CountUnassigned(ctx, obj.CharacterID)
	}

	return r.TaskRepo.CountByCategoryID(ctx, obj.ID)
}

// Keep is the resolver for the _keep field.
func (r *categoryFilterResolver) Keep(ctx context.Context, obj *entity.CategoryFilter, data *bool) error {
	panic(fmt.Errorf("not implemented: Keep - _keep"))
}

// Keep is the resolver for the _keep field.
func (r *categoryOrderByResolver) Keep(ctx context.Context, obj *entity.CategoryOrderBy, data *bool) error {
	panic(fmt.Errorf("not implemented: Keep - _keep"))
}

// Category returns CategoryResolver implementation.
func (r *Resolver) Category() CategoryResolver { return &categoryResolver{r} }

// CategoryFilter returns CategoryFilterResolver implementation.
func (r *Resolver) CategoryFilter() CategoryFilterResolver { return &categoryFilterResolver{r} }

// CategoryOrderBy returns CategoryOrderByResolver implementation.
func (r *Resolver) CategoryOrderBy() CategoryOrderByResolver { return &categoryOrderByResolver{r} }

type categoryResolver struct{ *Resolver }
type categoryFilterResolver struct{ *Resolver }
type categoryOrderByResolver struct{ *Resolver }
