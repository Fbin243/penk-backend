// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"tenkhours/services/core/entity"
)

type AppSettings struct {
	MinDurationTime        int `json:"minDurationTime"`
	MaxDurationTime        int `json:"maxDurationTime"`
	LimitedCharacterNumber int `json:"limitedCharacterNumber"`
	LimitedCategoryNumber  int `json:"limitedCategoryNumber"`
	LimitedMetricNumber    int `json:"limitedMetricNumber"`
}

type CategoryConnection struct {
	TotalCount int               `json:"totalCount"`
	Edges      []entity.Category `json:"edges"`
}

type Fish struct {
	ProfileID string `json:"profileID"`
}

func (Fish) IsEntity() {}

type GoalConnection struct {
	TotalCount int           `json:"totalCount"`
	Edges      []entity.Goal `json:"edges"`
}

type HabitConnection struct {
	TotalCount int            `json:"totalCount"`
	Edges      []entity.Habit `json:"edges"`
}

type HabitLogConnection struct {
	TotalCount int               `json:"totalCount"`
	Edges      []entity.HabitLog `json:"edges"`
}

type MetricConnection struct {
	TotalCount int             `json:"totalCount"`
	Edges      []entity.Metric `json:"edges"`
}

type Mutation struct {
}

type Query struct {
}

type TaskConnection struct {
	TotalCount int           `json:"totalCount"`
	Edges      []entity.Task `json:"edges"`
}

type TaskSessionConnection struct {
	TotalCount int                  `json:"totalCount"`
	Edges      []entity.TaskSession `json:"edges"`
}

type Month string

const (
	MonthJanuary   Month = "January"
	MonthFebruary  Month = "February"
	MonthMarch     Month = "March"
	MonthApril     Month = "April"
	MonthMay       Month = "May"
	MonthJune      Month = "June"
	MonthJuly      Month = "July"
	MonthAugust    Month = "August"
	MonthSeptember Month = "September"
	MonthOctober   Month = "October"
	MonthNovember  Month = "November"
	MonthDecember  Month = "December"
)

var AllMonth = []Month{
	MonthJanuary,
	MonthFebruary,
	MonthMarch,
	MonthApril,
	MonthMay,
	MonthJune,
	MonthJuly,
	MonthAugust,
	MonthSeptember,
	MonthOctober,
	MonthNovember,
	MonthDecember,
}

func (e Month) IsValid() bool {
	switch e {
	case MonthJanuary, MonthFebruary, MonthMarch, MonthApril, MonthMay, MonthJune, MonthJuly, MonthAugust, MonthSeptember, MonthOctober, MonthNovember, MonthDecember:
		return true
	}
	return false
}

func (e Month) String() string {
	return string(e)
}

func (e *Month) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Month(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Month", str)
	}
	return nil
}

func (e Month) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Weekday string

const (
	WeekdaySunday    Weekday = "Sunday"
	WeekdayMonday    Weekday = "Monday"
	WeekdayTuesday   Weekday = "Tuesday"
	WeekdayWednesday Weekday = "Wednesday"
	WeekdayThursday  Weekday = "Thursday"
	WeekdayFriday    Weekday = "Friday"
	WeekdaySaturday  Weekday = "Saturday"
)

var AllWeekday = []Weekday{
	WeekdaySunday,
	WeekdayMonday,
	WeekdayTuesday,
	WeekdayWednesday,
	WeekdayThursday,
	WeekdayFriday,
	WeekdaySaturday,
}

func (e Weekday) IsValid() bool {
	switch e {
	case WeekdaySunday, WeekdayMonday, WeekdayTuesday, WeekdayWednesday, WeekdayThursday, WeekdayFriday, WeekdaySaturday:
		return true
	}
	return false
}

func (e Weekday) String() string {
	return string(e)
}

func (e *Weekday) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Weekday(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Weekday", str)
	}
	return nil
}

func (e Weekday) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
