# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
- graph/gql/*.graphql

# Where should the generated server code go?
exec:
  filename: graph/generated.go
  package: graph

# Uncomment to enable federation
federation:
  filename: graph/federation.go
  package: graph
  version: 2

# Where should any generated models go?
model:
  filename: graph/model/models_gen.go
  package: model

# Where should the resolver implementations go?
resolver:
  layout: follow-schema
  dir: graph
  package: graph
  filename_template: "{name}.resolvers.go"
  # Optional: turn on to not generate template comments above resolvers
  # omit_template_comment: false

  # Optional: turn on use ` + "`" + `gqlgen:"fieldName"` + "`" + ` tags in your models
  # struct_tag: json

  # Optional: turn on to use []Thing instead of []*Thing
omit_slice_element_pointers: true

# Optional: turn on to omit Is<Name>() methods to interface and unions
# omit_interface_checks : true

# Optional: turn on to skip generation of ComplexityRoot struct content and Complexity function
# omit_complexity: false

# Optional: turn on to not generate any file notice comments in generated files
# omit_gqlgen_file_notice: false

# Optional: turn on to exclude the gqlgen version in the generated file notice. No effect if `omit_gqlgen_file_notice` is true.
# omit_gqlgen_version_in_file_notice: false

# Optional: turn off to make struct-type struct fields not use pointers
# e.g. type Thing struct { FieldA OtherThing } instead of { FieldA *OtherThing }
# struct_fields_always_pointers: true

# Optional: turn off to make resolvers return values instead of pointers for structs
# resolvers_always_return_pointers: true

# Optional: turn on to return pointers instead of values in unmarshalInput
# return_pointers_in_unmarshalinput: false

# Optional: wrap nullable input fields with Omittable
# nullable_input_omittable: true

# Optional: set to speed up generation time by not performing a final validation pass.
# skip_validation: true

# Optional: set to skip running `go mod tidy` when generating server code
# skip_mod_tidy: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind: # - "../graphql/graph/model"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  ID:
    model:
    - github.com/99designs/gqlgen/graphql.ID
    - github.com/99designs/gqlgen/graphql.Int
    - github.com/99designs/gqlgen/graphql.Int64
    - github.com/99designs/gqlgen/graphql.Int32
  Int:
    model:
    - github.com/99designs/gqlgen/graphql.Int
    - github.com/99designs/gqlgen/graphql.Int64
    - github.com/99designs/gqlgen/graphql.Int32
  ErrorCode:
    model: tenkhours/pkg/errors.ErrorCode
  SortOrder:
    model: tenkhours/pkg/types.SortOrder
  Profile:
    model: tenkhours/services/core/entity.Profile
  ProfileInput:
    model: tenkhours/services/core/entity.ProfileInput
  Character:
    model: tenkhours/services/core/entity.Character
  CharacterInput:
    model: tenkhours/services/core/entity.CharacterInput
  Category:
    model: tenkhours/services/core/entity.Category
  CategoryInput:
    model: tenkhours/services/core/entity.CategoryInput
  CategoryFilter:
    model: tenkhours/services/core/entity.CategoryFilter
  CategoryOrderBy:
    model: tenkhours/services/core/entity.CategoryOrderBy
  Metric:
    model: tenkhours/services/core/entity.Metric
    fields:
      categoryID:
        resolver: true
  MetricInput:
    model: tenkhours/services/core/entity.MetricInput
  MetricFilter:
    model: tenkhours/services/core/entity.MetricFilter
  MetricOrderBy:
    model: tenkhours/services/core/entity.MetricOrderBy
  CategoryStyle:
    model: tenkhours/services/core/entity.CategoryStyle
  CategoryStyleInput:
    model: tenkhours/services/core/entity.CategoryStyleInput
  Goal:
    model: tenkhours/services/core/entity.Goal
  Checkbox:
    model: tenkhours/services/core/entity.Checkbox
  MetricCondition:
    model: tenkhours/services/core/entity.MetricCondition
  Range:
    model: tenkhours/services/core/entity.Range
  GoalMetric:
    model: tenkhours/services/core/entity.GoalMetric
  GoalStatus:
    model: tenkhours/services/core/entity.GoalStatus
  GoalInput:
    model: tenkhours/services/core/entity.GoalInput
  GoalFilter:
    model: tenkhours/services/core/entity.GoalFilter
  GoalOrderBy:
    model: tenkhours/services/core/entity.GoalOrderBy
  GoalMetricInput:
    model: tenkhours/services/core/entity.GoalMetricInput
  CheckboxInput:
    model: tenkhours/services/core/entity.CheckboxInput
  RangeInput:
    model: tenkhours/services/core/entity.RangeInput
  Habit:
    model: tenkhours/services/core/entity.Habit
    fields:
      categoryID:
        resolver: true
  HabitReset:
    model: tenkhours/services/core/entity.HabitReset
  CompletionType:
    model: tenkhours/services/core/entity.CompletionType
  HabitInput:
    model: tenkhours/services/core/entity.HabitInput
  HabitFilter:
    model: tenkhours/services/core/entity.HabitFilter
  HabitOrderBy:
    model: tenkhours/services/core/entity.HabitOrderBy
  HabitLog:
    model: tenkhours/services/core/entity.HabitLog
  HabitLogInput:
    model: tenkhours/services/core/entity.HabitLogInput
  HabitLogFilter:
    model: tenkhours/services/core/entity.HabitLogFilter
  HabitLogOrderBy:
    model: tenkhours/services/core/entity.HabitLogOrderBy
  TimeTracking:
    model: tenkhours/services/core/entity.TimeTracking
  EntityType:
    model: tenkhours/services/core/entity.EntityType
  TimeTrackingInput:
    model: tenkhours/services/core/entity.TimeTrackingInput
  Task:
    model: tenkhours/services/core/entity.Task
    fields:
      categoryID:
        resolver: true
  TaskInput:
    model: tenkhours/services/core/entity.TaskInput
  TaskFilter:
    model: tenkhours/services/core/entity.TaskFilter
  TaskOrderBy:
    model: tenkhours/services/core/entity.TaskOrderBy
  TaskSession:
    model: tenkhours/services/core/entity.TaskSession
  TaskSessionInput:
    model: tenkhours/services/core/entity.TaskSessionInput
  TaskSessionFilter:
    model: tenkhours/services/core/entity.TaskSessionFilter
  TaskSessionOrderBy:
    model: tenkhours/services/core/entity.TaskSessionOrderBy
